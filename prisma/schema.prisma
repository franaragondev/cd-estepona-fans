// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
}

model User {
  id        String   @id @default(cuid())
  username  String?  @unique
  name      String?
  password  String
  role      Role     @default(EDITOR)
  createdAt DateTime @default(now())
  posts     News[]
}

model News {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  content       String
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  published     Boolean  @default(false)
  showTitle     Boolean  @default(true)

  translations  NewsTranslation[]
}

model NewsTranslation {
  id        String   @id @default(cuid())
  language  String   // "en", "fr", etc.
  title     String
  content   String
  newsId    String
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([newsId, language])
}

model PhotoAlbum {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  coverImage  String?
  photos      Photo[]
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  albumId   String?
  album     PhotoAlbum? @relation(fields: [albumId], references: [id])
}

model Player {
  id           String              @id @default(cuid())
  name         String
  number       Int
  position     String
  photo        String?
  birthday     DateTime?
  nationality  String?
  stats        PlayerSeasonStat[]
  mvps         MVP[]           
}

model PlayerSeasonStat {
  id        String   @id @default(cuid())
  season    String   // Ej: "2024-2025"
  playerId  String
  player    Player   @relation(fields: [playerId], references: [id])
  minutes   Int      @default(0)
  goals   Int      @default(0)
  matches   Int      @default(0)
}

model Team {
  id       String  @id @default(cuid())
  name     String
  crestUrl String?
  location String?  
  matches  Match[]
}

model Match {
  id          String   @id @default(cuid())
  date        DateTime?
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id])
  isHome      Boolean
  competition String
  score       String?

  mvps        MVP[]    
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}

model PendingSubscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
}

model MVP {
  id        String   @id @default(cuid())
  matchId   String
  playerId  String
  createdAt DateTime @default(now())

  match     Match    @relation(fields: [matchId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId]) // Evitar duplicados en un mismo partido
}